const app=require("express")();
const bundleBuilder=require("vue-server-renderer");
const path=require("path");

const fs=require("fs");
const templatePath=resolveFilePath("./template/default.html");
const template=fs.readFileSync(templatePath,"utf-8");

const wpPath=require("./build/webpack.server.config");


/*热更新需要的包*/

/*是否为开发环境*/
const isProd = process.env.NODE_ENV === 'production'
const chokidar = require('chokidar');
const webpack = require('webpack');
const serverConfig = require('./build/webpack.server.config');
const MFS = require('memory-fs');

const mfs = new MFS();

const serverCompiler = webpack(serverConfig);
serverCompiler.outputFileSystem = mfs;

const readFile = (fs, file) => {
    try {
      return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {}
  }

const update = () => {
    if (bundle ) {
      ready()
      cb(bundle, {
        template
      })
    }
  }
  let ready
  const readyPromise = new Promise(r => { ready = r })
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('模板页以被修改。')
    update()
  });
let bundles
let renderer



/*
const render=require("vue-server-renderer").createRenderer();
const createApp=require("./dist/server-bundle.js").default;
*/
const bundle=require("./dist/vue-ssr-server-bundle.json");

const resolve = file => path.resolve(__dirname, file)
const bundleRender=bundleBuilder.createBundleRenderer(bundle,{
    runInNewContext:false,
    template
});



function resolveFilePath(filePath){
    return path.resolve(__dirname,filePath);
}



serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    if (stats.errors.length) return
    var bundlePath = path.join(
        wpPath.output.path,
        'vue-ssr-server-bundle.json'
      )
    // read bundle generated by vue-ssr-webpack-plugin
   
    bundles = JSON.parse(mfs.readFileSync(bundlePath, "utf-8"))
    renderer =bundleBuilder.createBundleRenderer(bundles,{
        runInNewContext:false,
        template,
        basedir: resolve('./dist'),
    }); 
    console.log("触发");
    //createRenderer(bundle, options)
    //update()
  


  })

  /*
  const devMiddleware = require('webpack-dev-middleware')(serverCompiler, {
    publicPath: wpPath.output.publicPath,
    noInfo: true
  })
  app.use(devMiddleware)
  */
app.use(require('webpack-hot-middleware')(serverCompiler, { heartbeat: 5000 }))

app.use((req,res)=>{
    
    setTimeout(function(){
        const context={title:"very cool",url:req.url};
        renderer.renderToString(context,(err,html)=>{
          console.log("error:",err);
          if(err){
              res.send("404");
          }
          else{
              res.send(html);
          }
          //console.log("已发送",req);
      });  

    },3000);




    /*
    const context={title:"very cool",url:req.url};
    bundleRender.renderToString(context,(err,html)=>{
        console.log("error:",err);
        if(err){
            res.send("404");
        }
        else{
            res.send(html);
        }
    });
    */
    /*
    createApp(context).then(app=>{
        render.renderToString(app,(err,html)=>{
            
            if(err){
                res.send("404");
            }
            else{
                res.send(html);
            }

        });
    });
    */

});

app.get("*",(req,res)=>{
    //readyPromise.then(() => render(req, res))
})
  


app.listen(8091,()=>{
    console.log("server is start:8091");
});